exports.BattleAbilities = {
	},
	"corrosion": {
		desc: "This Pokemon has the ability to hit Steel-type Pokemon with Poison-type moves. Effectiveness of these moves takes into account the Steel-type Pokemon's other weaknesses and resistances.",
		shortDesc: "This Pokemon can hit Steel-types with Poison-type moves.",
		onModifyMove: function (move) {
			if (move.type in {'Poison':1}) {
				move.affectedByImmunities = false;
			}
		},
		id: "corrosion",
		name: "Corrosion",
		rating: 3,
		num: 189
	},
	"bugjuice": {
		desc: "This Pokemon is immune to Bug-type moves. If hit by a Bug move, it recovers 25% of its max HP.",
		shortDesc: "This Pokemon heals 1/4 of its max HP when hit by Bug moves; Bug immunity.",
		onTryHit: function (target, source, move) {
			if (target !== source && move.type === 'Bug') {
				if (!this.heal(target.maxhp / 4)) {
					this.add('-immune', target, '[msg]');
				}
				return null;
			}
		},
		id: "bugjuice",
		name: "Bug Juice",
		rating: 3.5,
		num: 190
	},	
	"pollinate": {
		desc: "This Pokemon's Powder moves have their priority increased by 1.",
		shortDesc: "Gives priority to Powder moves.",
		onModifyPriority: function (priority, pokemon, target, move) {
			if (move.isPowderMove) return priority + 1;
		},
		id: "pollinate",
		name: "Pollinate",
		rating: 4,
		num: 191
	},
	“bruteforce": {
		desc: "Makes all of this Pokemon's attacks physical.",
		shortDesc: "This Pokemon's moves all become physical.",
		onModifyMove: function (move) {
			if (move.category == 'special') {
				move.category = 'physical';
			}
		},
		id: "brute force",
		name: "Brute Force",
		rating: 3,
		num: 192
	}，
	"iceage": {
		desc: "Non super-effective damaging moves targeted on this Pokemon become Ice-type attacks.",
		shortDesc: "Non super-effective moves used on this Pokemon become Ice-type.",
		onTryHit: function (target, source, move) {
			if (this.getEffectiveness(move, target) <= 0) {
				move.type= 'Ice'
			}
		}，
		id: "iceage",
		name: "Ice Age",
		rating: 3,
		num: 193
	},
	"vampiricblade": {
		desc: "This Pokemon will recover 1/6 of the damage it deals with contact moves.",
		shortDesc: "Recovers 1/6 of damage dealt by a contact move.",
		onAfterMoveSelf: function (source, target) {
			if (source.lastDamage > 0 && move.isContact) {
				this.heal(source.lastDamage / 6, source);
			}
		}，
		id: "vampiricblade",
		name: "Vampiric Blade"
		rating: 3,
		num: 193
	}，
	“awareness": {
		desc: "This pokemon takes no damage from stealth rocks and spikes.",
		shortDesc: "Immune to entry hazard damage.",
		onDamage: function (damage, target, source, effect) {
			if (effect && effect.id === 'stealthrock' || 'spikes') {
				return false;
			}
		},
		id: "awareness",
		name: "Awareness",
		rating: 3,
		num: 195
	},
	"pollenshield": {
		desc: "If this Pokemon is active while Sunny Day is in effect, its Defense is increased by 50%",
		shortDesc: "If Sunny Day is active, this Pokemon's Defense is increased by 50%.",
		onModifyDef: function (defMod) {
			if (this.isWeather('sunnyday')) {
				return this.chain(defMod, 1.5);
			}
		},
		onModifySpD: function (spdMod) {
			if (this.isWeather('sunnyday')) {
				return this.chain(spdMod, 1.5);
			}
		},
		id: "pollenshield",
		name: "Pollen Shield",
		rating: 2,
		num: 196
	},
	"stormforce": {
		desc: "Raises the power of this Pokemon's Flying, Electric, and Dragon-type moves by 1.3x if the weather is Rainy.",
		shortDesc: "This Pokemon's Flying/Electric/Dragon attacks do 1.3x in Rain.",
		onBasePowerPriority: 8,
		onBasePower: function (basePower, attacker, defender, move) {
			if (this.isWeather('raindance')) {
				if (move.type === 'Flying' || move.type === 'Electric' || move.type === 'Dragon') {
					this.debug('Sand Force boost');
					return this.chainModify([0x14CD, 0x1000]);
				}
			}
		},
		id: "stormforce",
		name: "Storm Force",
		rating: 2,
		num: 197
	},
	"doppler": {
		desc: "Raises the power of this Pokemon's Water-type moves by 50% in rain, Fire-type moves by 50% in sun, Rock-Type moves by 50% in sandstorm, and Ice-Type moves by 50% in hail.",
		shortDesc: "This Pokemon's Flying/Electric/Dragon attacks do 1.3x in Rain.",
		onBasePowerPriority: 8,
		onBasePower: function (basePower, attacker, defender, move) {
			if (this.isWeather('raindance')) {
				if (move.type === 'Water') {
					this.debug('Doppler boost');
					return this.chainModify(1.5);
				}
			},
			if (this.isWeather('sunnyday')) {
				if (move.type === 'Fire') {
					this.debug('Doppler boost');
					return this.chainModify(1.5);
				}
			},
			if (this.isWeather('sandstorm')) {
				if (move.type === 'Rock') {
					this.debug('Doppler boost');
					return this.chainModify(1.5);
				}
			},
			if (this.isWeather('hail')) {
				is (move.type === 'Ice') {
					this.debug('Doppler boost');
					return this.chainModify(1.5);
				}
			}
		},
		id: "doppler",
		name: "Doppler",
		rating: 2,
		num: 198
	},
	"soothingpulse": {
		desc: "When this Pokemon enters the field, Every Pokemon in the user's party is cured of its major status problem..",
		shortDesc: "On switch-in, cures entire team of status.",
		onStart: function (pokemon, source) {
			var side = pokemon.side;
			for (var i = 0; i < side.pokemon.length; i++) {
				side.pokemon[i].status = '';
			}
			this.add('-cureteam', source, '[from] ability: Soothing Pulse');
		},
		id: "soothingpulse",
		name: "Soothing Pulse",
		rating: 4,
		num: 199
	},
	"quickwitted": {
		desc: "This Pokemon's Psychic-type moves have their priority increased by 1.",
		shortDesc: "Gives priority to Psychic-type moves.",
		onModifyPriority: function (priority, pokemon, target, move) {
			if (move && move.type === 'Psychic') return priority + 1;
		},
		id: "quickwitted",
		name: "Quick-Witted",
		rating: 4.5,
		num: 200
	},
	"shiver": {
		desc: "When this Pokemon enters the field, the Special Attack stat of each of its opponents lowers by one stage.",
		shortDesc: "On switch-in, this Pokemon lowers adjacent foes' Special Attack by 1.",
		onStart: function (pokemon) {
			var foeactive = pokemon.side.foe.active;
			for (var i = 0; i < foeactive.length; i++) {
				if (!foeactive[i] || !this.isAdjacent(foeactive[i], pokemon)) continue;
				if (foeactive[i].volatiles['substitute']) {
					this.add('-activate', foeactive[i], 'Substitute', 'ability: Shiver', '[of] ' + pokemon);
				} else {
					this.add('-ability', pokemon, 'Shiver', '[of] ' + foeactive[i]);
					this.boost({spa: -1}, foeactive[i], pokemon);
				}
			}
		},
		id: "shiver",
		name: "Shiver",
		rating: 3.5,
		num: 201
	},
	"amplifier": {
		desc: "Boosts the power of Sound Based moves by 1/3.",
		shortDesc: "Boosts the power of Sound Based moves by 1/3.",
		onBasePowerPriority: 8,
		onBasePower: function (basePower, attacker, defender, move) {
			if (move.isSoundBased) {
				return this.chainModify([0x14CD, 0x1000]);
			}
		},
		id: "amplifier",
		name: "Amplifier",
		rating: 3,
		num: 202
	},
	"capacitance": {
		desc: "This Pokemon's contact moves have a 30% chance of paralyzing the target.",
		shortDesc: "Contact moves have a 30% chance of paralyzing.",
		onModifyMove: function (move) {
			if (!move || !move.isContact) return;
			if (!move.secondaries) {
				move.secondaries = [];
			}
			move.secondaries.push({
				chance: 30,
				status: 'par'
			});
		},
		id: "capacitance",
		name: "Capacitance",
		rating: 2,
		num: 203
	},
	"comboartist": {
                desc: "This Pokemon does 50% more damage to targets with lowered Speed.",
                shortDesc: "Does 1.5x damage to slowed targets.",
                onBasePower: function (basePower, attacker, defender, move) {
			if (target.boosts[6] < 0) {
				return this.chainModify(1.5);
			}
		},
                id: "comboartist",
                name: "Combo Artist",
                rating: 3,
                num: 204
     	},
        "dimensionalwarp": {
                desc: "When it enters the field. this Pokemon starts the Trick Room effect, or cancels it if it is already in effect.",
                shortDesc: "Uses Trick Room upon field entry.",
                
                // copied effect from trick room move
                // think it has to be included here but not sure
                // there might be a way to reference the move's effect
                
                effect: {
			duration: 5,
			onStart: function (target, source) {
				this.add('-fieldstart', 'move: Trick Room', '[of] ' + source);
				this.getStatCallback = function (stat, statName) {
					// If stat is speed and does not overflow (Trick Room Glitch) return negative speed.
					if (statName === 'spe' && stat <= 1809) return -stat;
					return stat;
				};
			},
			onResidualOrder: 23,
			onEnd: function () {
				this.add('-fieldend', 'move: Trick Room');
				this.getStatCallback = null;
			}
		},
                
                onStart: function (source) {
			if (this.pseudoWeather['trickroom']) {
				this.removePseudoWeather('trickroom', source, effect, '[of] ' + source);
			} else {
				this.addPseudoWeather('trickroom', source, effect, '[of] ' + source);
			}
		},
                id: "dimensionalwarp",
                name: "Dimensional Warp",
                rating: 4,
                num: 205
     	},
        "dreamer": {
        desc: "This Pokemon's Special Attack is increased by 50% when it is asleep, and it can still use moves while asleep.",
                shortDesc: "While asleep, can use moves and has 1.5x Special Attack.",
                onModifySpA: function (spa, pokemon) {
			if (pokemon.status === 'slp') {
				return this.chainModify(1.5);
			}
                },
                //implement move choice in the sleep status itself
                id: "dreamer",
                name: "Dreamer",
                rating: 3,
                num: 206
      	},
      	"energycrystal": {
        	desc: "This Pokemon takes 3/4 damage from special moves. When it is hit by a special move, its Special Attack is boosted by one stage.",
        	shortDesc: "Takes 3/4 damage from special moves and raises Special Attack by 1 when hit by a special move.",
        	onSourceModifyDamage: function (damage, source, target, move) {
			if (move.category === 'special') {
                        	this.boost({spa:1});
                        	return this.chainModify(0.75);
			}
		},
        	id: "energycrystal",
        	name: "Energy Crystal",
        	rating: 3,
        	num: 207
      	},
      	"fireabsorb": {
		desc: "This Pokemon is immune to Fire moves. If hit by a Fire move, it recovers 25% of its max HP.",
		shortDesc: "This Pokemon heals 1/4 of its max HP when hit by Fire moves; Fire immunity.",
		onTryHit: function (target, source, move) {
			if (target !== source && move.type === 'Fire') {
				if (!this.heal(target.maxhp / 4)) {
					this.add('-immune', target, '[msg]');
				}
				return null;
			}
		},
		id: "fireabsorb",
		name: "Fire Absorb",
		rating: 3,
		num: 208
      	},
      	"gritpower": {
                desc: "Boosts Attack and Special Attack by 50% when afflicted with a status condition. Ignores the Attack drop from Burn.",
                shortDesc: "Has 1.5x Attk and SAttk when statused, ignores Burn's Attk drop.",
                onModifyAtk: function (atk, pokemon) {
			if (pokemon.status) {
				return this.chainModify(1.5);
			}
		},
		//implement ignoring burn's attack drop in the burn status, like guts
                onModifySpA: function (spa, pokemon) {
                        if (pokemon.status) {
				return this.chainModify(1.5);
			}
                },
                id: "gritpower",
                name: "Grit Power",
                rating: 3,
                num: 209
      	},
      	"grounded": {
                desc: "While user is on the field, all Pokemon have their Ground immunities ignored.",
                shortDesc: "All immunities to Ground are ignored while user is active.",
                onAnyModifyPokemon: function(pokemon) {
                    pokemon.negateImmunity['Ground'] = true;
                },
                id: "grounded",
                name: "Grounded",
                rating: 3,
                num: 210
      	},
      	"heatseek": {
                desc: "This Pokemon's Fire moves cannot miss.",
                shortDesc: "This Pokemon's Fire moves cannot miss.",
                onModifyMove: function(move) {
                    if (move.type === 'Fire') {
                        move.accuracy = true;
                    }
                },
                id: "heatseek",
                name: "Heat Seek",
                rating: 3,
                num: 210
      	},
      	"ignate": {
		desc: "Turns all of this Pokemon's Normal-typed attacks into Fire-typed and deal 1.3x damage. Does not affect Hidden Power.",
		shortDesc: "This Pokemon's Normal moves become Fire-type and do 1.3x damage.",
		onModifyMove: function (move, pokemon) {
			if (move.type === 'Normal' && move.id !== 'hiddenpower') {
				move.type = 'Fire';
				pokemon.addVolatile('ignate');
			}
		},
		effect: {
			duration: 1,
			onBasePowerPriority: 8,
			onBasePower: function (basePower, pokemon, target, move) {
				return this.chainModify([0x14CD, 0x1000]);
			}
		},
		id: "ignate",
		name: "Ignate",
		rating: 3,
		num: 211
	},
	"judoka": {
                desc: "This Pokemon does 1.5x damage against opponents weighing 60 kg (132.3 lbs) or more.",
                shortDesc: "50% damage bonus against targets weighing 60 kg (132.3 lbs) or more.",
                onBasePower: function (basePower, attacker, defender, move) {
			if (target.weightkg >= 60) {
				return this.chainModify(1.5);
			}
		},
                id: "judoka",
                name: "Judoka",
                rating: 3,
                num: 212
        },
        "paintshield": {
		desc: "Halves the damage done to this Pokemon by special attacks.",
		shortDesc: "Halves special damage done to this Pokemon.",
		onModifyAtkPriority: 6,
		onSourceModifySpA: function (spa, attacker, defender, move) {
			return this.chainModify(0.5);
		},
		id: "paintshield",
		name: "Paint Shield",
		rating: 3.5,
		num: 213
	},
        "petrified": {
		desc: "Turns all of this Pokemon's Grass-typed attacks into Rock-typed and deal 1.3x damage. Also prevents all damage except from direct attacks.",
		shortDesc: "This Pokemon can only be damaged by direct attacks. Its Grass moves become Rock-type and do 1.3x damage.",
		onModifyMove: function (move, pokemon) {
			if (move.type === 'Grass') {
				move.type = 'Rock';
				pokemon.addVolatile('petrified');
			}
		},
		effect: {
			duration: 1,
			onBasePowerPriority: 8,
			onBasePower: function (basePower, pokemon, target, move) {
				return this.chainModify([0x14CD, 0x1000]);
			}
		},
		id: "petrified",
		name: "Petrified",
		rating: 3,
		num: 214
	},
        "propogate": {
                desc: "When this Pokemon enters battle, it afflicts its opponent with Leech Seed.",
                shortDesc: "Uses Leech Seed on switch-in.",        
                onStart: function (pokemon) {
			var foeactive = pokemon.side.foe.active;
			for (var i = 0; i < foeactive.length; i++) {
				if (!foeactive[i] || !this.isAdjacent(foeactive[i], pokemon)) continue;
				if (foeactive[i].volatiles['substitute']) {
					// does it give a message?
					this.add('-activate', foeactive[i], 'Substitute', 'ability: Propogate', '[of] ' + pokemon);
				}
                                else if (target.hasType('Grass')) {
                                    this.add('-immune', target, '[msg]');
                                    return null;
                                }   
                                else {
					this.add('-ability', pokemon, 'Propogate', '[of] ' + foeactive[i]);
				}
			}
		},
                volatileStatus: 'leechseed', //necessary?
                effect: {
			onStart: function (target) {
				this.add('-start', target, 'move: Leech Seed');
			},
			onResidualOrder: 8,
			onResidual: function (pokemon) {
				var target = pokemon.side.foe.active[pokemon.volatiles['leechseed'].sourcePosition];
				if (!target || target.fainted || target.hp <= 0) {
					this.debug('Nothing to leech into');
					return;
				}
				var damage = this.damage(pokemon.maxhp / 8, pokemon, target);
				if (damage) {
					this.heal(damage, target, pokemon);
				}
			}
		},
                id: "propogate",
                name: "Propogate",
                rating: 3,
                num: 215
            },
	"purify": {
		desc: "This Pokemon is immune to all Poison-type attacks and Toxic Spikes and absorbs Toxic Spikes on its side of the field when it enters battle; additionally, its Grass-type attacks receive a 50% boost if a Poison-type move hits this Pokemon or if it absorbs Toxic Spikes. Multiple boosts do not occur if this Pokemon is hit with multiple Poison-type attacks or if it is hit with a Poison-type attack after absorbing Toxic Spikes.",
		shortDesc: "This Pokemon's Grass attacks do 1.5x damage if hit by one Poison move or by Toxic Spikes; absorbs Toxic Spikes; Poison immunity.",
		onTryHit: function (target, source, move) {
			if (target !== source && move.type === 'Poison') {
				move.accuracy = true;
				if (!target.addVolatile('purify')) {
					this.add('-immune', target, '[msg]');
				}
				return null;
			}
		},
                onSetStatus: function (status, target, source, effect) {
				if (effect && effect.id === 'toxicspikes') {
					if (!target.addVolatile('purify')) {
                                            this.add('-immune', target, '[msg]');
                                        }
                                        return false;
				}
			},
		effect: {
			noCopy: true, // doesn't get copied by Baton Pass
			onStart: function (target) {
				this.add('-start', target, 'ability: Purify');
			},
			onModifyAtkPriority: 5,
			onModifyAtk: function (atk, attacker, defender, move) {
				if (move.type === 'Grass') {
					this.debug('Purify boost');
					return this.chainModify(1.5);
				}
			},
			onModifySpAPriority: 5,
			onModifySpA: function (atk, attacker, defender, move) {
				if (move.type === 'Grass') {
					this.debug('Purify boost');
					return this.chainModify(1.5);
				}
			}
		},
		id: "purify",
		name: "Purify",
		rating: 3,
		num: 216
	},
	"quickwitted": {
		desc: "This Pokemon's Psychic-type moves have their priority increased by 1.",
		shortDesc: "Gives priority to Psychic-type moves.",
		onModifyPriority: function (priority, pokemon, target, move) {
			if (move && move.type === 'Psychic') return priority + 1;
		},
		id: "quickwitted",
		name: "Quick-Witted",
		rating: 3.5,
		num: 217
	},
        "roadblock": {
		desc: "When this Pokemon enters the field, its opponents cannot switch or flee the battle unless they are part Flying-type, have the Levitate ability, are holding Shed Shell, or they use the moves Baton Pass or U-Turn. Flying-type and Levitate Pokemon cannot escape if they are holding Iron Ball or Gravity is in effect. Levitate Pokemon also cannot escape if their ability is disabled through other means, such as Skill Swap or Gastro Acid.",
		shortDesc: "Prevents foes from switching out normally unless they have immunity to Ground.",
		onFoeModifyPokemon: function (pokemon) {
			if (pokemon.runImmunity('Ground', false)) {
				pokemon.tryTrap();
			}
		},
		onFoeMaybeTrapPokemon: function (pokemon) {
			if (pokemon.runImmunity('Ground', false)) {
				pokemon.maybeTrapped = true;
			}
		},
		id: "roadblock",
		name: "Road Block",
		rating: 5,
		num: 218
	},
        "levitate": { //update levitate's description to indicate immunity to road block
            inherit: true,
            desc: "This Pokemon is immune to Ground-type attacks, Spikes, Toxic Spikes and the Arena Trap and Road Block abilities; it loses these immunities while holding Iron Ball, after using Ingrain or if Gravity is in effect.",
        },
        "scarecrow": {
		desc: "This Pokemon is immune to Flying-type attacks.",
		shortDesc: "This Pokemon is immune to Flying.",
		onImmunity: function (type) {
			if (type === 'Flying') return false;
		},
		id: "scarecrow",
		name: "Scarecrow",
		rating: 3,
		num: 219
	},
        "sneaky": {
		desc: "This Pokemon's Dark-type moves have their priority increased by 1.",
		shortDesc: "Gives priority to Dark-type moves.",
		onModifyPriority: function (priority, pokemon, target, move) {
			if (move && move.type === 'Dark') return priority + 1;
		},
		id: "sneaky",
		name: "Sneaky",
		rating: 3,
		num: 220
	},
        "sweetdreams": {
                desc: "If this Pokemon is asleep at the end of a turn, it recovers 1/8 of its max HP.",
                shortDesc: "Recovers 1/8 of max HP every turn spent asleep",
                onResidualOrder: 5,
		onResidual: function (pokemon) {
                        if (this.status === 'slp') {
                            this.heal(pokemon.maxhp / 16);
                        }
		},
                id: "sweetdreams",
                name: "Sweet Dreams",
                rating: 3,
                num: 221
        },
        "swordsman": {
                desc: "Boosts the power of Blade, Slash, Cut, and Sword moves by 50%",
                shortDesc: "Boosts the power of Blade, Slash, Cut, and Sword moves by 50%.",
		onBasePowerPriority: 8,
		onBasePower: function (basePower, attacker, defender, move) {
			if (move.isSwordMove) {
				return this.chainModify(1.5);
			}
		},
		id: "swordsman",
		name: "Swordsman",
		rating: 3,
		num: 222
	},
        "trickster": {
                desc: "This Pokemon's status moves that lower a target's stats have their effect doubled.",
                shortDesc: "Stat-lowering status moves have their effect doubled.",
                onModifyMove: function (move, pokemon) {
                        var boosts = move.boosts;
                        if (boosts) {
                            if (boosts.atk && boosts.atk < 0) {
                                boosts.atk *= 2;
                            }
                            if (boosts.def && boosts.def < 0) {
                                boosts.def *= 2;
                            }
                            if (boosts.spa && boosts.spa < 0) {
                                boosts.spa *= 2;
                            }
                            if (boosts.spd && boosts.spd < 0) {
                                boosts.spd *= 2;
                            }
                            if (boosts.spe && boosts.spe < 0) {
                                boosts.spe *= 2;
                            }
                        }
                },
                id: "trickster",
                name: "Trickster",
                rating: 3,
                num: 223
        },
        "unadaptable": {
                desc: "This Pokemon's non-STAB moves have their damage increased by 66%.",
                shortDesc: "Boosts damage of non-STAB moves by 66%.",
                onBasePower: function (basePower, pokemon, target, move) {
				if (!pokemon.hasType(move.type) || move.type === '???') {
                                    return this.chainModify([0x1A8F, 0x1000]);
                                }
			},
                id: "unadaptable",
                name: "Unadaptable",
                rating: 3.5,
                num: 224
        }
        
      	
